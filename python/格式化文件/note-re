# 正则表达式re
- 是一个计算机而科学的概念
- 用于使用单个字符串来描述，匹配符合某个规则的字符串
- 常常用来检索，替换某些模式的文本。


# 正则的写法
- .(点号)：表示任意一个字符，除了\n，比如查找所有的一个字符
- []：匹配中括号中列举的任意字符
- [^]：匹配不再中括号中列举的任意字符
- \d：任意一个数字
- \D：除了数字都可以
- \s：表示空格，tap键
- \S：除了空白符号
- \w：单词字符，a到z，A到Z，0到9，_(下划线)
- *：表示前面内容重复0次或者多次
- +：前面内容至少出现一次
- ？：前面出现的内容为0次或1此
- {m,n}：允许前面的内容最少出现m此，最多出现n次
- ^:匹配字符串的开始
- $：匹配字符串的结尾
- \b：匹配单词的边界，比如er\b可以匹配到never而不能匹配到verb。
- ()：对正则表达式内容进行分组，从第一个括号开始，编号逐渐增大
- \A：只匹配字符串的开头
- \Z：只匹配字符串的末尾
- |：左右任意一个
- (?p<name>...)：分组，除了原来的编号在制定一个别名
- (?p=name)：引用分组。


# re使用大致步骤
- 使用compilc将表示正则的字符串便以为一个pattern对象
- 通过pattern对象提供一系列方法对文本进行查找匹配，获得匹配结果，一个match对象
- 最后使用match对象提供的属性和方法获得信息，根据需要进行操作


# re常用函数
- group()：获得一个或者多个分组匹配的字符串，当要获得整个匹配的子串是，直接使用group或group(0)
- start: 获取匹配的子串在整个字符串中的实际起始位置，参数默认为0
- end：获取分组匹配的字串在整个字符串中的结束位置，默认为0
- span：返回的结构技术（start（group），end（group））